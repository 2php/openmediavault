#!/usr/bin/env python3
#
# This file is part of OpenMediaVault.
#
# @license   http://www.gnu.org/licenses/gpl.html GPL Version 3
# @author    Volker Theile <volker.theile@openmediavault.org>
# @copyright Copyright (c) 2009-2016 Volker Theile
#
# OpenMediaVault is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# OpenMediaVault is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with OpenMediaVault. If not, see <http://www.gnu.org/licenses/>.

import os
import sys
import syslog
import argparse
import openmediavault

__args = []

def print_error(message):
	global __args
	if __args.verbose:
		sys.stderr.write("ERROR: {}\n".format(message))
	syslog.syslog(message);

def list_scripts():
	names = [ name for name in os.listdir(
	  openmediavault.OMV_MKCONF_SCRIPTS_DIR) if os.path.isfile(
	  os.path.join(openmediavault.OMV_MKCONF_SCRIPTS_DIR, name)) ]
	names.sort()
	print("\n".join(names))

def execute_script():
	global __args
	# Test if the script exists.
	path = os.path.join(openmediavault.OMV_MKCONF_SCRIPTS_DIR, __args.name)
	if not os.path.exists(path):
		print_error("The script '{}' does not exist".format(path))
		sys.exit(100)
	# Test if the script is executable.
	if not os.access(path, os.X_OK):
		print_error("The script '{}' is not executable".format(path))
		sys.exit(101)
	# Execute the script.
	# Note, the first argument, by convention, should point to the
	# filename associated with the file being executed.
	return os.execv(path, [ path ] + __args.args)

def main():
	global __args
	rc = 0
	parser = argparse.ArgumentParser(
	  description = "Generate the configuration files.")
	parser.add_argument("-l", "--list", default=False, action="store_true",
	  help = "list available scripts and exit")
	parser.add_argument("-q", "--quiet", default=True, action="store_false",
	  dest="verbose", help = "quiet mode, no error messages are generated")
	group = parser.add_argument_group()
	group.add_argument("name", nargs="?",
	  help = "the name of the script to be executed")
	group.add_argument("args", nargs=argparse.REMAINDER,
	  help = "extra arguments to the executed script")
	__args = parser.parse_args()
	if __args.list:
		list_scripts()
	else:
		if None == __args.name:
			parser.print_help()
		else:
			rc = execute_script()
	return rc

if __name__ == "__main__":
	sys.exit(main())
